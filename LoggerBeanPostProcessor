/**
 * Copyright (C), 和信电子商务有限公司
 */
package com.hexin.lego.job.logger;

import org.slf4j.Logger;
import org.springframework.aop.framework.AdvisedSupport;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.config.AutowireCapableBeanFactory;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;

/**
 * @FileName LoggerBeanPostProcessor
 * @describe
 * @author shijudong
 * @create 2019/6/28 0028 下午 3:32
 */
@Component
public class LoggerBeanPostProcessor implements BeanPostProcessor, InstantiationAwareBeanPostProcessor, BeanFactoryAware {

    private BeanFactory beanFactory;

    @Override
    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {
        LoggerFactoryBean factoryBean = null;
        try {
            if (beanName.endsWith("JobLogger")) {
                factoryBean = (LoggerFactoryBean) beanClass.newInstance();
                factoryBean.setAttachedSource(beanName);
                return factoryBean;
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return factoryBean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        try {
//            if (beanName.endsWith("JobLogger")) {
            if (beanName.endsWith("autoPushBidToFundPartJobLogger")) {
                Object object = beanFactory.getBean(beanName.replace("JobLogger", "Job"));
                Field tmp = object.getClass().getDeclaredField("CGLIB$CALLBACK_0");
                tmp.setAccessible(true);
                Object dynamicAdvisedInterceptor = tmp.get(object);
                Field advised = dynamicAdvisedInterceptor.getClass().getDeclaredField("advised");
                advised.setAccessible(true);
                Object target = ((AdvisedSupport)advised.get(dynamicAdvisedInterceptor)).getTargetSource().getTarget();
                Field field = target.getClass().getDeclaredField("logger");
                field.setAccessible(true);
                LoggerFactoryBean factoryBean = (LoggerFactoryBean) bean;
                Logger logger = factoryBean.getObject();
                field.set(target, logger);

                AutowireCapableBeanFactory autowireCapableBeanFactory = (AutowireCapableBeanFactory) beanFactory;
                autowireCapableBeanFactory.autowireBean(logger);

                Liberty libertyTop1 = (Liberty) autowireCapableBeanFactory.createBean(Liberty.class, AutowireCapableBeanFactory.AUTOWIRE_NO, false);
                Field liberty = target.getClass().getDeclaredField("liberty");
                liberty.setAccessible(true);
//              如果自己又覆盖了，最终AOP是拦截不到的，AOP拦截的那个“代理”对象
//              libertyTop1 = new Liberty();
                liberty.set(target, libertyTop1);
                autowireCapableBeanFactory.autowireBean(libertyTop1);

                System.out.println(field.get(object));
                System.out.println("tttttttttttttttttttt");
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return bean;
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        this.beanFactory = beanFactory;
    }
}
